package tsunami.features.modules.misc;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import meteordevelopment.orbit.EventHandler;
import net.minecraft.class_124;
import net.minecraft.class_2338;
import net.minecraft.class_2350;
import net.minecraft.class_2596;
import net.minecraft.class_2626;
import net.minecraft.class_2791;
import net.minecraft.class_2846;
import net.minecraft.class_3675;
import net.minecraft.class_2846.class_2847;
import tsunami.core.Managers;
import tsunami.events.impl.PacketEvent;
import tsunami.features.cmd.Command;
import tsunami.features.modules.Module;
import tsunami.features.modules.client.ClientSettings;
import tsunami.features.modules.render.StorageEsp;
import tsunami.gui.misc.GuiScanner;
import tsunami.gui.notification.Notification;
import tsunami.setting.Setting;
import tsunami.setting.impl.Bind;
import tsunami.utility.Timer;

public class NoCommentExploit extends Module {
   private final Setting<Bind> self = new Setting("openGui", new Bind(-1, false, false));
   public Setting<Integer> delay = new Setting("Delay", 250, 0, 1000);
   public Setting<Integer> loop = new Setting("LoopPerTick", 1, 1, 10);
   public Setting<Boolean> loadgui = new Setting("LoadGui", false);
   private static int count;
   private static int reRunStartX;
   private static int reRunStartY;
   private static int currentX;
   private static int currentZ;
   public static List<NoCommentExploit.Dot> dots = new ArrayList();
   private static class_2338 playerPos = null;
   private GuiScanner gui = new GuiScanner();
   private Timer delayTimer = new Timer();
   public static int scannedChunks = 0;
   public int couti = 1;

   public NoCommentExploit() {
      super("NoCommentExploit", Module.Category.NONE);
   }

   public void rerun(int x, int y) {
      dots.clear();
      playerPos = null;
      count = 0;
      this.delayTimer.reset();
      reRunStartX = x;
      reRunStartY = y;
   }

   public void onUpdate() {
      if (class_3675.method_15987(mc.method_22683().method_4490(), ((Bind)this.self.getValue()).getKey())) {
         mc.method_1507(this.gui);
      }

      if (GuiScanner.neartrack && scannedChunks > 25) {
         scannedChunks = 0;
      }

      if (GuiScanner.neartrack && scannedChunks == 0) {
         this.doNocom((int)mc.field_1724.method_23317(), (int)mc.field_1724.method_23321());
      }

      if (!GuiScanner.neartrack) {
         if ((Boolean)this.loadgui.getValue()) {
            mc.method_1507(this.gui);
            this.loadgui.setValue(false);
         }

         if (!GuiScanner.busy) {
            this.doNocom((int)mc.field_1724.method_23317(), (int)mc.field_1724.method_23321());
         } else if (reRunStartX != 0 && reRunStartY != 0) {
            this.doNocom(reRunStartX, reRunStartY);
         }

      }
   }

   public void doNocom(int x3, int y3) {
      playerPos = class_2338.method_49637(mc.field_1724.method_23317(), mc.field_1724.method_23318() - 1.0D, mc.field_1724.method_23321());
      if (this.delayTimer.passedMs((long)(Integer)this.delay.getValue())) {
         for(int i = 0; i < (Integer)this.loop.getValue(); ++i) {
            int x1 = this.getSpiralCoords(count)[0] * 128 + x3;
            int z1 = this.getSpiralCoords(count)[1] * 128 + y3;
            class_2338 position = new class_2338(x1, 0, z1);
            currentX = x1;
            currentZ = z1;
            this.sendPacket(new class_2846(class_2847.field_12971, playerPos, class_2350.field_11034));
            this.sendPacket(new class_2846(class_2847.field_12971, position, class_2350.field_11034));
            dots.add(new NoCommentExploit.Dot(x1 / 16, z1 / 16, NoCommentExploit.DotType.Searched));
            playerPos = class_2338.method_49637(mc.field_1724.method_23317(), mc.field_1724.method_23318() - 1.0D, mc.field_1724.method_23321());
            this.delayTimer.reset();
            ++count;
            ++scannedChunks;
         }
      }

   }

   @EventHandler
   public final void onPacketReceive(PacketEvent.Receive event) {
      class_2596 var3 = event.getPacket();
      if (var3 instanceof class_2626) {
         class_2626 packet = (class_2626)var3;
         int x = packet.method_11309().method_10263();
         int z = packet.method_11309().method_10260();
         Iterator var5 = StorageEsp.getLoadedChunks().iterator();

         class_2791 chunk;
         do {
            if (!var5.hasNext()) {
               String shittytext = (ClientSettings.isRu() ? "Обнаружен игрок на X: " : "Player spotted at X: ") + String.valueOf(class_124.field_1060) + x + String.valueOf(class_124.field_1070) + " Z: " + String.valueOf(class_124.field_1060) + z;
               dots.add(new NoCommentExploit.Dot(x / 16, z / 16, NoCommentExploit.DotType.Spotted));
               Command.sendMessage(shittytext);
               this.gui.consoleout.add(new NoCommentExploit.Cout(this.couti, shittytext));
               ++this.couti;
               if (GuiScanner.track) {
                  this.gui.consoleout.add(new NoCommentExploit.Cout(this.couti, (ClientSettings.isRu() ? "Отслеживаем игроков на X: " : "Tracking players on X: ") + x + " Z: " + z));
                  ++this.couti;
                  this.rerun(x, z);
               }

               Managers.NOTIFICATION.publicity("NoCommentExploit", shittytext, 3, Notification.Type.INFO);
               return;
            }

            chunk = (class_2791)var5.next();
         } while(chunk.method_12004().field_9181 != x / 16 && chunk.method_12004().field_9180 != z / 16);

      }
   }

   private int[] getSpiralCoords(int n) {
      int x = 0;
      int z = 0;
      int d = 1;
      int lineNumber = 1;
      int[] coords = new int[]{0, 0};

      for(int i = 0; i < n; ++i) {
         if (2 * x * d < lineNumber) {
            x += d;
            coords = new int[]{x, z};
         } else if (2 * z * d < lineNumber) {
            z += d;
            coords = new int[]{x, z};
         } else {
            d *= -1;
            ++lineNumber;
            ++n;
         }
      }

      return coords;
   }

   public void onEnable() {
      playerPos = null;
      count = 0;
   }

   public void onDisable() {
      dots.clear();
      playerPos = null;
      count = 0;
   }

   public String getDisplayInfo() {
      return currentX + " , " + currentZ;
   }

   public static record Dot(int posX, int posY, NoCommentExploit.DotType type) {
      public Dot(int posX, int posY, NoCommentExploit.DotType type) {
         this.posX = posX;
         this.posY = posY;
         this.type = type;
      }

      public int posX() {
         return this.posX;
      }

      public int posY() {
         return this.posY;
      }

      public NoCommentExploit.DotType type() {
         return this.type;
      }
   }

   public static enum DotType {
      Spotted,
      Searched;

      // $FF: synthetic method
      private static NoCommentExploit.DotType[] $values() {
         return new NoCommentExploit.DotType[]{Spotted, Searched};
      }
   }

   public static record Cout(int posY, String out) {
      public Cout(int posY, String out) {
         this.posY = posY;
         this.out = out;
      }

      public int posY() {
         return this.posY;
      }

      public String out() {
         return this.out;
      }
   }
}
